Multi-Class Planned Design Recipe Practise - Task


1. Describe the Problem

>As a user.
>So that I can keep track of my tasks.
>I want a program that I can add todo tasks to and see a list of them.

>As a user.
>So that I can focus on tasks to complete.
>I want to mark tasks as complete and have them disappear from the list.

2. Design the Class System
┌───────────────────┐
│                   │
│ TaskList          │
│ ────────          │
│                   │
│ - add             │
│ - all             │
│ - complete        │
│                   │
│                   │
└──────┬────────────┘
       │
       │TodoList has zero or
       ▼   more TodoTasks
┌───────────────────┐
│                   │
│ Task              │
│ ────────          │
│                   │
│ - mark_complete   │
│ - title           │
│ - complete?       │
│                   │
│                   │
└───────────────────┘


class TaskList
    def add(task) # Task is an instance of task
    end

    def all
        # Returns a list of Task instances
        # But only the non-completed ones
    end

    def complete
        # Returns a list of Task instances
        # But only the completed ones
    end
end

class Task
    def initializer(title) #title is a string
    end

    def title
        # Returns the title as a string
    end

    def mark_complete
        # Mark the task as complete
        # Returns nothing
    end

    def complete?
        # Returns true if marked completed, otherwise false
    end
end


3. Create Examples as Integration Tests

#1 - adds tasks to list
task_list = TaskList.new
task_1 = Task.new("Walk the cat")
task_2 = Task.new("Walk the dog")
task_list.add(task_1)
task_list.add(task_2)
task_list.all # => [task_1, task_2]

#2 - marks a task as complete, returns uncompleted task in all
task_list = TaskList.new
task_1 = Task.new("Walk the cat")
task_2 = Task.new("Walk the dog")
task_list.add(task_1)
task_list.add(task_2)
task_2.mark_complete
task_list.all # => [task_1]

#3 - marks a task as complete, returns task in complete
task_list = TaskList.new
task_1 = Task.new("Walk the cat")
task_2 = Task.new("Walk the dog")
task_list.add(task_1)
task_list.add(task_2)
task_2.mark_complete
task_list.complete # => [task_2]

4. Create Examples as Unit Tests

#TaskList
#1 - TaskList intializes and, returns all with an empty array
task_list = TaskList.new
task_list.all # => []

#2 - TaskList intializes and, returns complete with an empty array
task_list = TaskList.new
task_list.complete # => []

#Task
#1 - Initializes with a task
task = Task.new("Walk the dog")
task.title # => "Walk the dog"

#2 - Informs user if task complete, returns false when not complete.
task = Task.new("Walk the dog")
task.complete? # => false

#3 - Informs user if task complete, returns true when complete.
task = Task.new("Walk the dog")
task.mark_complete
task.complete? # => true


5. Implement the Behaviour

After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.